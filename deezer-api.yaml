openapi: 3.0.0
info:
  title: Deezer Simple API
  description: |-
    Search Deezer Music Catalog
    
    When the return of your request is a list of objects, you do not have to get the whole result in one time, you can paginate it if you want. Some parameters can be used to constrain the number of objects the request returns 
    - **index**: the offset of the first object you want to get
    - **limit**: the maximum number of objects to return 

    The **order** parameter accepts one of the following values: 
      - RANKING
      - TRACK_ASC
      - TRACK_DESC
      - ARTIST_ASC
      - ARTIST_DESC
      - ALBUM_ASC
      - ALBUM_DESC
      - RATING_ASC
      - RATING_DESC
      - DURATION_ASC
      - DURATION_DESC
    
    Explicit response values (lyrics, covers, etc):
    - 0: Not Explicit
    - 1: Explicit
    - 2: Unknown
    - 3: Edited
    - 4: Partially Explicit (Album 'lyrics' only); 
    - 5: Partially Unknown (Album 'lyrics' only); 
    - 6: No Advice Available
    - 7: Partially No Advice Available (Album 'lyrics' only))

    Some useful links:
    - [API Docs](https://developers.deezer.com/api/)
    
  termsOfService: http://swagger.io/terms/
  contact:
    email: rauber@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.2
externalDocs:
  description: Find out more about the Deezer API
  url: https://developers.deezer.com/api/
servers:
  - url: https://api.deezer.com
tags:
  - name: albums
  - name: artists
  - name: tracks
  - name: genres
  - name: podcasts
paths:
  /album/{id}:
    get:
      tags:
        - albums
      summary: Fetch Album
      operationId: getAlbumById
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid status value
  /album/{id}/tracks:
    get:
      tags:
        - albums
        - tracks
      summary: Fetch Album Tracks
      operationId: getAlbumTracks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "Album ID"
        - $ref: '#/components/parameters/indexParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        '400':
          description: Invalid status value
  /artist/{id}:
    get:
      tags:
        - artists
      summary: Fetch Artist
      operationId: getArtistById
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid status value
  /artist/{id}/top:
    get:
      tags:
        - artists
        - tracks
      summary: Get the top 5 tracks of an artist
      description: Get the top 5 tracks of an artist
      operationId: getArtistTopTracks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "Artist ID"
        - $ref: '#/components/parameters/indexParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        '400':
          description: Invalid status value
  /artist/{id}/albums:
    get:
      tags:
        - artists
      summary: Fetch a list of artist's albums
      operationId: getArtistAlbums
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "Artist ID"
        - $ref: '#/components/parameters/indexParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '400':
          description: Invalid status value
  /artist/{id}/related:
    get:
      tags:
        - artists
      summary: Fetch a list of related artists
      operationId: getRelatedArtists
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "Artist ID"
        - $ref: '#/components/parameters/indexParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Track'
        '400':
          description: Invalid status value
  /episode/{id}:
    get:
      tags:
        - podcasts
      summary: Fetch an episode
      operationId: getEpisodeById
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
        '400':
          description: Invalid status value
  /genre:
    get:
      tags:
        - genres
      summary: List all genres
      operationId: listGenres
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
        '400':
          description: Invalid status value
  /genre/{id}:
    get:
      tags:
        - genres
      summary: Fetch a genre
      operationId: getGenreById
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '400':
          description: Invalid status value
  /genre/{id}/artists:
    get:
      tags:
        - artists
        - genres
      summary: List artists by genre
      operationId: listArtistsByGenre
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "Genre ID"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid status value
  /podcast/{id}/episodes:
    get:
      tags:
        - podcasts
      summary: List podcast's episodes
      operationId: listPodcastEpisodes
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: "Podcast ID"
        - $ref: '#/components/parameters/indexParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PodcastEpisode'
        '400':
          description: Invalid status value
  /search:    
    get:
      tags:
        - tracks
      summary: Search tracks
      operationId: searchTracks
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
        - name: order
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/indexParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        '400':
          description: Invalid status value
  /search/album:    
    get:
      tags:
        - albums
      summary: Search albums
      operationId: searchAlbums
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
        - name: order
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/indexParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
        '400':
          description: Invalid status value
  /search/artist:    
    get:
      tags:
        - artists
      summary: Search artists
      operationId: searchArtists
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
        - name: order
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/indexParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid status value
  /search/podcast:    
    get:
      tags:
        - podcasts
      summary: Search podcasts
      operationId: searchPodcasts
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
        - name: order
          in: query
          required: false
          schema:
            type: string
        - $ref: '#/components/parameters/indexParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Podcast'
        '400':
          description: Invalid status value
  /track/{id}:
    get:
      tags:
        - tracks
      summary: Fetch a track
      operationId: getTrackById
      parameters:
        - $ref: '#/components/parameters/idParam'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Invalid status value
components:
  parameters:
    idParam:
      in: path
      name: id
      required: true
      schema:
        type: integer
    indexParam:
      in: query
      name: index
      required: false
      schema:
        type: integer
    limitParam:
      in: query
      name: limit
      required: false
      schema:
        type: integer
  schemas:
    Album: 
      type: object
      properties:
        id:
          type: integer
          description:  The Deezer album id
        title:
          type: string
          description:  The album title
        upc:
          type: string
          description:  The album UPC
        link:
          type: string
          description:  The url of the album on Deezer
        share:
          type: string
          description:  The share link of the album on Deezer
        cover:
          type: string
          description: "The url of the album's cover."
        cover_small:
          type: string
          description: "The url of the album's cover in size small."
        cover_medium:
          type: string
          description: "The url of the album's cover in size medium."
        cover_big:
          type: string
          description: "The url of the album's cover in size big."
        cover_xl:
          type: string
          description: "The url of the album's cover in size xl."
        md5_image:
          type:  string
        genre_id:
          type: integer
          description:  "The album's first genre id (You should use the genre list instead). NB : -1 for not found"
        genres:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        label:
          type: string
          description:  "The album's label name"
        nb_tracks:
          type:  integer
        duration:
          type: integer
          description:  "The album's duration (seconds)"
        fans:
          type: integer
          description:  "The number of album's Fans"
        release_date:
          type: string
          description:  "The album's release date"
        record_type:
          type: string
          description:  "The record type of the album (EP / ALBUM / etc..)"
        available:
          type:  boolean
        alternative:  
          $ref: '#/components/schemas/Album'
        tracklist:  
          type: string
          description: "API Link to the tracklist of this album"
        explicit_lyrics:  
          type: boolean
          description: "Whether the album contains explicit lyrics"          
        explicit_content_lyrics:  
          type: integer
          description: "The explicit content lyrics values (0:Not Explicit; 1:Explicit; 2:Unknown; 3:Edited; 4:Partially Explicit (Album 'lyrics' only); 5:Partially Unknown (Album 'lyrics' only); 6:No Advice Available; 7:Partially No Advice Available (Album 'lyrics' only))"
        explicit_content_cover:  
          type: integer
          description: "The explicit cover values (0:Not Explicit; 1:Explicit; 2:Unknown; 3:Edited; 4:Partially Explicit (Album 'lyrics' only); 5:Partially Unknown (Album 'lyrics' only); 6:No Advice Available; 7:Partially No Advice Available (Album 'lyrics' only))"
        contributors:
          type: array
          description: Return a list of contributors on the album
          items:
            $ref: '#/components/schemas/Artist'
        artist:  
          $ref: '#/components/schemas/Artist'
    Artist:
      type: object
      properties:
        id:
          type: integer  
          description: "The artist's Deezer id"
        name:  
          type: string
          description: "The artist's name"
        link:  
          type: string
          description: "The url of the artist on Deezer"
        share:  
          type: string
          description: "The share link of the artist on Deezer"
        picture:  
          type: string
          description: "The url of the artist picture."
        picture_small:  
          type: string
          description: "The url of the artist picture in size small."
        picture_medium:  
          type: string
          description: "The url of the artist picture in size medium."
        picture_big:  
          type: string
          description: "The url of the artist picture in size big."
        picture_xl:  
          type: string
          description: "The url of the artist picture in size xl."
        nb_album:
          type: integer
          description: "The number of artist's albums"
        nb_fan:  
          type: integer
          description: "The number of artist's fans"
        radio:  
          type: boolean
          description: "true if the artist has a smartradio"
        tracklist:  
          type: string
          description: "API Link to the top of this artist"
    Episode:
      type: object
      properties:
        id:
          type: integer
          description: "The episode's Deezer id"
        title:
          type: string
          description: "The episode's title"
        description:
          type: string
          description: "The episode's description"
        available:
          type: boolean
          description: "If the episode is available or not"
        release_date:
          type: string
          description: "The episode's release date"
        duration:
          type: integer
          description: "The episode's duration (seconds)"
        link:
          type: string
          description: "The url of the episode on Deezer"
        picture:
          type: string
          description:  "The url of the episode's cover."
        picture_small:
          type: string
          description:  "The url of the episode's cover in size small."
        picture_medium:
          type: string
          description:  "The url of the episode's cover in size medium."
        picture_big:
          type: string
          description:  "The url of the episode's cover in size big."
        picture_xl:
          type: string
          description:  "The url of the episode's cover in size xl."
        podcast:
          $ref: '#/components/schemas/Podcast'
    Genre:
      type: object
      properties:
        id:
          type: integer
          description:   "The editorial's Deezer id"
        name:
          type: string
          description: "The editorial's name"
        picture:
          type: string
          description:  "The url of the genre picture."
        picture_small:
          type: string
          description:  "The url of the genre picture in size small."
        picture_medium:
          type: string
          description:  "The url of the genre picture in size medium."
        picture_big:
          type: string
          description:  "The url of the genre picture in size big."
        picture_xl:
          type: string
          description:  "The url of the genre picture in size xl."
    Podcast:
      type: object
      properties:
        id:
          type: integer
          description: "The podcast's Deezer id"
        title:
          type: string
          description: "The podcast's title"
        description:
          type: string
          description: "The podcast's description"
        available:
          type: boolean
          description: "If the podcast is available or not."
        fans:
          type: integer
          description: "The number of podcast's fans"
        url:
          type: string
          description: "The URL of the podcast on Deezer"
        share:
          type: string
          description: "The share link of the podcast on Deezer"
        picture:
          type: string
          description:  "The url of the podcast's cover."
        picture_small:
          type: string
          description:  "The url of the podcast's cover in size small."
        picture_medium:
          type: string
          description:  "The url of the podcast's cover in size medium."
        picture_big:
          type: string
          description:  "The url of the podcast's cover in size big."
        picture_xl:
          type: string
          description:  "The url of the podcast's cover in size xl."
    PodcastEpisode:
      type: object
      properties:
        id:
          type: integer
          description: "The episode's Deezer id"
        title:
          type: string
          description: "The episode's title"
        release_date:
          type: string
          description: "The episode's release date"
        duration:
          type: integer
          description: "The episode's duration (seconds)"
        picture:
          type: string
          description:  "The url of the episode's cover."
    Track:
      type: object
      properties:
        id:
          type: integer
          description: The track's Deezer id
        readable:
          type: boolean 
          description: true if the track is readable in the player for the current user
        title:
          type: string 
          description: The track's fulltitle
        title_short:
          type: string
          description: The track's short title
        title_version:
          type: string
          description: The track version
        unseen:
          type: boolean
          description: The track unseen status
        isrc:
          type: string
          description: The track isrc
        link:
          type: string
          description: The url of the track on Deezer
        share:
          type: string
          description: The share link of the track on Deezer
        duration:
          type: integer
          description: The track's duration in seconds  
        track_position:
          type: integer
          description: The position of the track in its album
        disk_number:
          type: integer
          description: The track's album's disk number
        rank:
          type: integer
          description: The track's Deezer rank
        release_date:
          type: string
          description: The track's release date
        explicit_lyrics:
          type: boolean
          description: Whether the track contains explicit lyrics
        explicit_content_lyrics:  
          type: integer
          description: "The explicit content lyrics values (0:Not Explicit; 1:Explicit; 2:Unknown; 3:Edited; 6:No Advice Available)"   
        explicit_content_cover:
          type: integer
          description: "The explicit cover value (0:Not Explicit; 1:Explicit; 2:Unknown; 3:Edited; 6:No Advice Available)"
        preview:
          type: string
          description: The url of track's preview file. This file contains the first 30 seconds of the track
        bpm:
          type: number
          description: Beats per minute  
        gain:
          type: number
          description: Signal strength
        available_countries:
          type: array
          items:
            type: string
          description: List of countries where the track is available
        alternative:
          type: object
          description: Return an alternative readable track if the current track is not readable
        contributors:
          type: array
          description: Return a list of contributors on the track
          items: 
            $ref: '#/components/schemas/Artist'
        md5_image:
          type: string
        artist:
          $ref: '#/components/schemas/Artist'
        album:
          $ref: '#/components/schemas/Album'