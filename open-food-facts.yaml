openapi: 3.0.3
info:
  title: Open Food Facts Open API
  description: |
    As a developer, the Open Food Facts API allows you to get information
    and contribute to the products database. You can create great apps to
    help people make better food choices and also provide data to enhance the database.
  termsOfService: https://world.openfoodfacts.org/terms-of-use
  contact:
    name: Open Food Facts
    url: https://slack.openfoodfacts.org/
    email: contact@openfoodfacts.org
  license:
    name: 'data: ODbL'
    url: https://opendatacommons.org/licenses/odbl/summary/index.html
  version: '2'
servers:
  - description: dev
    url: https://off:off@world.openfoodfacts.net
  - url: https://world.openfoodfacts.org
    description: prod
paths:
  /api/v2/product/{barcode}:
    get:
      tags:
        - Read Requests
      summary: Get information for a specific product by barcode
      parameters:
        - name: barcode
          in: path
          description: |
            The barcode of the product to be fetched
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: '3017620422003'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      description: |
        A product can be fetched via its unique barcode.
        It returns all the details of that product response.
      operationId: getProductByBarcode
  /api/v2/search:
    get:
      summary: Search for Products
      tags:
        - Read Requests
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
      operationId: search
      description: |
        Search request allows you to get the nutritional data of products that match your search criteria.
        It allows you create many custom APIs for your use case.
        If the search query parameter has 2 possible values, they are seperated by a comma(,).
        When filtering via a parameter that has different language codes like `fr`, `de` or `en`, specify the language code in the parameter name e.g `categories_tags_en`
      parameters:
        - $ref: '#/components/parameters/fields'
        - $ref: '#/components/parameters/sort_by'
        - name: additives_tags
          schema:
            type: string
            example: e322
          in: query
          description: |
            The additives_tags in english of product(s) you are searching for.
        - name: allergens_tags
          schema:
            type: string
            example: m
          in: query
          description: |
            The allergens_tags in english of product(s) you are searching for.
        - name: brands_tags
          schema:
            type: string
            example: ferrero
          in: query
          description: |
            The brands_tags of product(s) you are searching for.
        - name: categories_tags
          schema:
            type: string
            example: chocolates
          in: query
          description: |
            The category of product(s) you are searching for.
        - name: countries_tags
          schema:
            type: string
            example: united-kingdom
          in: query
          description: |
            The countries_tags_en of product(s) you are searching for.
        - name: emb_codes_tags
          schema:
            type: string
          in: query
          description: |
            The emb_codes_tags of product(s) you are searching for.
        - name: labels_tags
          schema:
            type: string
            example: organic
          in: query
          description: |
            The labels_tags in english of product(s) you are searching for.
        - name: manufacturing_places_tags
          schema:
            type: string
          in: query
          description: |
            The manufacturing_places_tags of product(s) you are searching for.
        - name: nutrition_grades_tags
          schema:
            type: string
            example: e
          in: query
          description: |
            The nutrition_grades_tags of product(s) you are searching for.
        - schema:
            type: string
          in: query
          name: origins_tags
          description: |
            The origins_tags of product(s) you are searching for.
        - schema:
            type: string
            example: 1-jar-aus-klarglas
          in: query
          name: packaging_tags_de
          description: |
            The packaging_tag in german of product(s) you are searching for.
        - schema:
            type: string
          in: query
          name: purchase_places_tags
          description: |
            The purchase_places_tags of product(s) you are searching for.
        - schema:
            type: string
            example: nutrition-facts-completed
          in: query
          name: states_tags
          description: |
            The states_tags in english of product(s) you are searching for.
        - schema:
            type: string
            example: aldi
          in: query
          name: stores_tags
          description: |
            The stores_tags of product(s) you are searching for.
        - schema:
            type: string
          in: query
          name: traces_tags
          description: |
            The traces_tags of product(s) you are searching for.
components:
  parameters:
    id:
      schema:
        type: string
        example: ingredients_en
      in: query
      name: id
      required: true
    code:
      schema:
        type: string
        example: '4251105501381'
      in: query
      name: code
      description: Barcode of the product
      required: true
    process_image:
      schema:
        type: string
        example: '1'
      in: query
      name: process_image
      required: true
    ocr_engine:
      schema:
        type: string
        example: google_cloud_vision
      in: query
      name: ocr_engine
      required: true
    imgid:
      schema:
        type: string
        example: '1'
      in: query
      name: imgid
      required: true
    angle:
      schema:
        type: string
        example: '90'
      in: query
      name: angle
      required: true      
    sort_by:
      schema:
        type: string
        example: product_name
        enum:
          - product_name
          - last_modified_t
          - scans_n
          - unique_scans_n
          - created_t
          - completeness
          - popularity_key
          - nutriscore_score
          - nova_score
          - nothing
          - ecoscore_score
      in: query
      name: sort_by
      description: |
        The allowed values  used to sort/order the search results.
        * `product_name` sorts on name
        * `ecoscore_score`, `nova_score`, `nutriscore_score` rank on the [Eco-Score](https://world.openfoodfacts.org/eco-score-the-environmental-impact-of-food-products), [Nova](https://world.openfoodfacts.org/nova), or [Nutri-Score](https://world.openfoodfacts.org/nutriscore)
        * `scans_n`, `unique_scans_n` and `popularity_key` are about product popularity: number of scans on unique scans, rank of product
        * `created_t`, `last_modified_t`, are about creation and modification dates
        * `nothing`, tells not to sort at all (because if you do not provide the sort_by argument we default to sorting on popularity (for food) or last modification date)
    fields:
      schema:
        type: string
        example: 'code,product_name,selected_images,nutriments'
      in: query
      name: fields
      description: |
        The fields to be returned from the product object can also be limited.
        If not specified, it returns the entire product object response.
    tagtype:
      schema:
        type: string
        example: additives
      in: query
      name: tagtype
    term:
      schema:
        type: string
        example: f
      in: query
      name: term
tags:
  - name: Read Requests
